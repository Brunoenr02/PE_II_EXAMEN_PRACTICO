name: pyflowops
services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: pyflowops_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pyflowops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pyflowops_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
      DEBUG: ${DEBUG}
      REDIS_URL: ${REDIS_URL}
      PRESENCE_TTL_SECONDS: 5
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pyflowops_network
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Redis PubSub for GraphQL Subscriptions
  redis:
    image: redis:7-alpine
    container_name: pyflowops_redis
    ports:
      - "6379:6379"
    networks:
      - pyflowops_network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: pyflowops_frontend
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_GRAPHQL_HTTP_URL: ${VITE_GRAPHQL_HTTP_URL}
      VITE_GRAPHQL_WS_URL: ${VITE_GRAPHQL_WS_URL}
      VITE_APP_TITLE: ${VITE_APP_TITLE}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - pyflowops_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  postgres_data:
    driver: local

networks:
  pyflowops_network:
    driver: bridge
